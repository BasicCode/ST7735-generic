/* 
 * File:   ST7735.h
 * Author: tommy
 *
 * Created on 17 October 2018, 7:23 PM
 */

#ifndef ST7735_H
#define	ST7735_H

#ifdef	__cplusplus
extern "C" {
#endif

    /* Font files. Thanks Adafruit!
     * We (might) have to split out fonts in to two or more
     * arrays. Most devices have a limit of one RAM bank per
     * which is probably 256 bytes.
     */
    const char Font1[] = {
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x5F, 0x00, 0x00,
    0x00, 0x07, 0x00, 0x07, 0x00,
    0x14, 0x7F, 0x14, 0x7F, 0x14,
    0x24, 0x2A, 0x7F, 0x2A, 0x12,
    0x23, 0x13, 0x08, 0x64, 0x62,
    0x36, 0x49, 0x56, 0x20, 0x50,
    0x00, 0x08, 0x07, 0x03, 0x00,
    0x00, 0x1C, 0x22, 0x41, 0x00,
    0x00, 0x41, 0x22, 0x1C, 0x00,
    0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
    0x08, 0x08, 0x3E, 0x08, 0x08,
    0x00, 0x80, 0x70, 0x30, 0x00,
    0x08, 0x08, 0x08, 0x08, 0x08,
    0x00, 0x00, 0x60, 0x60, 0x00,
    0x20, 0x10, 0x08, 0x04, 0x02,
    0x3E, 0x51, 0x49, 0x45, 0x3E,
    0x00, 0x42, 0x7F, 0x40, 0x00,
    0x72, 0x49, 0x49, 0x49, 0x46,
    0x21, 0x41, 0x49, 0x4D, 0x33,
    0x18, 0x14, 0x12, 0x7F, 0x10,
    0x27, 0x45, 0x45, 0x45, 0x39,
    0x3C, 0x4A, 0x49, 0x49, 0x31,
    0x41, 0x21, 0x11, 0x09, 0x07,
    0x36, 0x49, 0x49, 0x49, 0x36,
    0x46, 0x49, 0x49, 0x29, 0x1E,
    0x00, 0x00, 0x14, 0x00, 0x00,
    0x00, 0x40, 0x34, 0x00, 0x00,
    0x00, 0x08, 0x14, 0x22, 0x41,
    0x14, 0x14, 0x14, 0x14, 0x14,
    0x00, 0x41, 0x22, 0x14, 0x08,
    0x02, 0x01, 0x59, 0x09, 0x06,
    0x3E, 0x41, 0x5D, 0x59, 0x4E,
    0x7C, 0x12, 0x11, 0x12, 0x7C,
    0x7F, 0x49, 0x49, 0x49, 0x36,
    0x3E, 0x41, 0x41, 0x41, 0x22,
    0x7F, 0x41, 0x41, 0x41, 0x3E,
    0x7F, 0x49, 0x49, 0x49, 0x41,
    0x7F, 0x09, 0x09, 0x09, 0x01,
    0x3E, 0x41, 0x41, 0x51, 0x73,
    0x7F, 0x08, 0x08, 0x08, 0x7F,
    0x00, 0x41, 0x7F, 0x41, 0x00,
    0x20, 0x40, 0x41, 0x3F, 0x01,
    0x7F, 0x08, 0x14, 0x22, 0x41,
    0x7F, 0x40, 0x40, 0x40, 0x40,
    0x7F, 0x02, 0x1C, 0x02, 0x7F,
    0x7F, 0x04, 0x08, 0x10, 0x7F,
    0x3E, 0x41, 0x41, 0x41, 0x3E,
    0x7F, 0x09, 0x09, 0x09, 0x06,
    0x3E, 0x41, 0x51, 0x21, 0x5E,
    0x7F, 0x09, 0x19, 0x29, 0x46
    };
    const char Font2[] = {
    0x26, 0x49, 0x49, 0x49, 0x32,
    0x03, 0x01, 0x7F, 0x01, 0x03,
    0x3F, 0x40, 0x40, 0x40, 0x3F,
    0x1F, 0x20, 0x40, 0x20, 0x1F,
    0x3F, 0x40, 0x38, 0x40, 0x3F,
    0x63, 0x14, 0x08, 0x14, 0x63,
    0x03, 0x04, 0x78, 0x04, 0x03,
    0x61, 0x59, 0x49, 0x4D, 0x43,
    0x00, 0x7F, 0x41, 0x41, 0x41,
    0x02, 0x04, 0x08, 0x10, 0x20,
    0x00, 0x41, 0x41, 0x41, 0x7F,
    0x04, 0x02, 0x01, 0x02, 0x04,
    0x40, 0x40, 0x40, 0x40, 0x40,
    0x00, 0x03, 0x07, 0x08, 0x00,
    0x20, 0x54, 0x54, 0x78, 0x40,
    0x7F, 0x28, 0x44, 0x44, 0x38,
    0x38, 0x44, 0x44, 0x44, 0x28,
    0x38, 0x44, 0x44, 0x28, 0x7F,
    0x38, 0x54, 0x54, 0x54, 0x18,
    0x00, 0x08, 0x7E, 0x09, 0x02,
    0x18, 0xA4, 0xA4, 0x9C, 0x78,
    0x7F, 0x08, 0x04, 0x04, 0x78,
    0x00, 0x44, 0x7D, 0x40, 0x00,
    0x20, 0x40, 0x40, 0x3D, 0x00,
    0x7F, 0x10, 0x28, 0x44, 0x00,
    0x00, 0x41, 0x7F, 0x40, 0x00,
    0x7C, 0x04, 0x78, 0x04, 0x78,
    0x7C, 0x08, 0x04, 0x04, 0x78,
    0x38, 0x44, 0x44, 0x44, 0x38,
    0xFC, 0x18, 0x24, 0x24, 0x18,
    0x18, 0x24, 0x24, 0x18, 0xFC,
    0x7C, 0x08, 0x04, 0x04, 0x08,
    0x48, 0x54, 0x54, 0x54, 0x24,
    0x04, 0x04, 0x3F, 0x44, 0x24,
    0x3C, 0x40, 0x40, 0x20, 0x7C,
    0x1C, 0x20, 0x40, 0x20, 0x1C,
    0x3C, 0x40, 0x30, 0x40, 0x3C,
    0x44, 0x28, 0x10, 0x28, 0x44,
    0x4C, 0x90, 0x90, 0x90, 0x7C,
    0x44, 0x64, 0x54, 0x4C, 0x44,
    0x00, 0x08, 0x36, 0x41, 0x00,
    0x00, 0x00, 0x77, 0x00, 0x00,
    0x00, 0x41, 0x36, 0x08, 0x00,
    0x24, 0x66, 0xE7, 0x66, 0x24
    };
    
    //Some bitmaps (see bitmap function for description)
    //First to integers are width, height respectively.
    unsigned int testBMP[] = {8, 8,
        0xAAAA, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x5555,
        0x0000, 0xAAAA, 0x000F, 0x00F0, 0x0F00, 0xF000, 0x5555, 0x0000,
        0x0000, 0x0000, 0x00FF, 0x0FF0, 0xFF00, 0xF00F, 0x0000, 0x0000,
        0x0000, 0x0000, 0x0FFF, 0xFFF0, 0xFF0F, 0xF0FF, 0x0000, 0x0000,
        0x0000, 0x0000, 0xF0F0, 0x0F0F, 0xFFFF, 0xFFFF, 0x0000, 0x0000,
        0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000,
        0x0000, 0x5555, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xAAAA, 0x0000,
        0x5555, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0xAAAA
    };
    
    unsigned int downArrowBMP[] = {8, 4,
        0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
        0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000,
        0x0000, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000,
        0x0000, 0x0000, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000
    };
    
    //Command definitions
    #define ST7735_NOP     0x00
    #define ST7735_SWRESET 0x01
    #define ST7735_INVOFF  0x20
    #define ST7735_INVON   0x21
    #define ST7735_DISPOFF 0x28
    #define ST7735_DISPON  0x29
    #define ST7735_CASET   0x2A
    #define ST7735_RASET   0x2B
    #define ST7735_RAMWR   0x2C
    #define ST7735_RAMRD   0x2E

    //Pin definitions (For PIC18F26K40) - change as required
    //NOTE: on older micros this will just be RC0, RC1, etc.
    //On newer chips we have to use the latch registers.
    #define CSX     LATC0 //Chip select
    #define RESX    LATC1 //Reset pin
    #define CMD     LATC2 //Command select
    //Software SPI pins if required
    #define SDO     LATC3
    #define SCK     LATC4

    //Use hardware SPI, will just big bang it through if false
    #define USE_HW_SPI  1
    
    //SPI Bus status register and transmission buffer
    //Set these to suit your particular microcontroller
    #define SPIBUF  SPI1TXB
    #define SPIIDLE SPI1STATUS & 0x20
    
    void spi_write(unsigned char data);
    void lcd_write_command(unsigned char data);
    void lcd_write_data(unsigned char data);
    void lcd_init(void);
    void delay_ms(double millis);
    void delay_us(long int cycles);
    void lcd_init_command_list(void);
    void draw_pixel(char x, char y, unsigned int colour);
    void set_draw_window(char row_start, char row_end, char col_start, char col_end);
    void fill_rectangle(char x1, char y1, char x2, char y2, unsigned int colour);
    void draw_char(char x, char y, char c, unsigned int colour, char size);
    void draw_string(char x, char y, unsigned int colour, char size, char *str);
    void draw_line(char x1, char y1, char x2, char y2, unsigned int colour);
    void draw_bitmap(int x, int y, int scale, unsigned int *bmp);

#ifdef	__cplusplus
}
#endif

#endif	/* ST7735_H */

